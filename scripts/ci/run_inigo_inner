#!/bin/bash

set -e -x

export GOROOT=/usr/local/go
export PATH=${GOROOT}/bin:${PATH}

cd diego-release/

export GOPATH_ROOT=$PWD

export GOPATH=${GOPATH_ROOT}
export PATH=${GOPATH_ROOT}/bin:${PATH}

export AUCTIONEER_GOPATH=${GOPATH_ROOT}
export CONVERGER_GOPATH=${GOPATH_ROOT}
export EXECUTOR_GOPATH=${GOPATH_ROOT}
export FILE_SERVER_GOPATH=${GOPATH_ROOT}
export LINUX_CIRCUS_GOPATH=${GOPATH_ROOT}
export DOCKER_CIRCUS_GOPATH=${GOPATH_ROOT}
export NSYNC_GOPATH=${GOPATH_ROOT}
export RECEPTOR_GOPATH=${GOPATH_ROOT}
export REP_GOPATH=${GOPATH_ROOT}
export ROUTE_EMITTER_GOPATH=${GOPATH_ROOT}
export STAGER_GOPATH=${GOPATH_ROOT}
export TPS_GOPATH=${GOPATH_ROOT}

# These components vendor their own dependencies
export ROUTER_GOPATH=${GOPATH_ROOT}/src/github.com/cloudfoundry/gorouter/Godeps/_workspace:${GOPATH_ROOT}
export GARDEN_LINUX_GOPATH=${GOPATH_ROOT}/src/github.com/cloudfoundry-incubator/garden-linux/Godeps/_workspace:${GOPATH_ROOT}

# install application dependencies
for package in github.com/coreos/etcd github.com/apcera/gnatsd; do
  go install $package
done

cd $GOPATH_ROOT/src/github.com/cloudfoundry-incubator/inigo

pushd $GOPATH_ROOT/src/github.com/cloudfoundry-incubator/garden-linux/old
  make # compile wshd/etc.
  export GARDEN_BINPATH=$PWD/linux_backend/bin
popd

go install github.com/onsi/ginkgo/ginkgo

export GARDEN_ROOTFS=/opt/inigo/rootfs

# used for routing to apps; same logic that Garden uses.
export EXTERNAL_ADDRESS=$(ip route get 8.8.8.8 | sed 's/.*src\s\(.*\)\s/\1/;tx;d;:x')

# GARDEN_GRAPH_PATH is the root of the docker image filesystem
export GARDEN_GRAPH_PATH=/tmp/garden-tmp

mkdir -p $GARDEN_GRAPH_PATH

if [ "$USE_TMPFS" = "true" ]; then
  mount -t tmpfs none $GARDEN_GRAPH_PATH
else
  garden_graph_loopback="$GARDEN_GRAPH_PATH.img"

  # unmount and delete garden graph fs
  set +e
  umount $GARDEN_GRAPH_PATH
  losetup --all | grep $garden_graph_loopback | cut --delimiter=: --fields=1 | xargs --no-run-if-empty --max-args=1 losetup --detach
  rm $garden_graph_loopback
  set -e

  # create and mount GARDEN_GRAPH_PATH as a loopback device so we don't consume RAM

  dd if=/dev/null of=$garden_graph_loopback bs=1M seek=6000 1> /dev/null 2> /dev/null
  mkfs.ext4 -b 4096 -q -F -O ^has_journal,uninit_bg $garden_graph_loopback
  losetup --all | grep $garden_graph_loopback | cut --delimiter=: --fields=1 | xargs --no-run-if-empty --max-args=1 losetup --detach
  losetup --find $garden_graph_loopback
  graph_loop_device=$(losetup --all | grep $garden_graph_loopback | cut --delimiter=: --fields=1 | head -1)
  mount $graph_loop_device $GARDEN_GRAPH_PATH
fi

color_flag=""
if [ -n "$GO_PIPELINE_COUNTER" ]; then
  color_flag="-noColor"
fi

nodes_flag=""
if [ "$GINKGO_PARALLEL" = "true" ]; then
  nodes_flag="-nodes=4"
fi

pushd $GOPATH_ROOT/src/github.com/cloudfoundry-incubator/inigo
  if [ "$GINKGO_PARALLEL" = "true" ]; then
    ginkgo $color_flag $nodes_flag -r -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing "$@"
  else
    # always attempt to run executor in parallel
    ginkgo $color_flag -nodes=4 -r -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 "$@" executor/

    # run everything but executor with normal rules
    ginkgo $color_flag $nodes_flag -r -skipPackage=executor -failOnPending -randomizeAllSpecs -trace -race -slowSpecThreshold=10 -keepGoing "$@"
  fi
popd

# unmount and delete garden graph fs
if [ "$USE_TMPFS" = "" ]; then
  umount -l $GARDEN_GRAPH_PATH
  losetup --all | grep $garden_graph_loopback | cut --delimiter=: --fields=1 | xargs --no-run-if-empty --max-args=1 losetup --detach
  rm $garden_graph_loopback
fi
